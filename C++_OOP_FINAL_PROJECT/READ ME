The task is to build a C++ console-based quiz application using object-oriented programming concepts. The system should:

* Define a structure to store multiple-choice questions.

Support two types of users: Guest and Registered.

Allow users to attempt a quiz.

Only show quiz results to Registered participants.

Support adding and removing questions dynamically.

Use inheritance and polymorphism for participant behavior.

  *How the Task Was Completed
Used a struct to model quiz questions.

Created an abstract base class QuizParticipant with a pure virtual function attempt().

Implemented two classes:

GuestParticipant (answers questions but doesn't get a score)

RegisteredParticipant (answers and gets a score)

Created functions to add and remove questions from a dynamic array.

Demonstrated quiz functionality in the main() function.
  * DEFINED EACH LINE

#include <iostream>           // Includes input/output functionality
#include <cstring>            // Includes string functions like strcpy
using namespace std;          // Uses standard namespace to avoid writing std::

struct Question {             // Structure to represent a multiple-choice question
    char prompt[100];         // Holds the question text
    char choices[4][40];      // Array to store 4 answer choices
    int correctIdx;           // Index of the correct choice (0â€“3)
};

class QuizParticipant {       // Abstract base class for quiz participants
public:
    virtual int attempt(Question* questions, int num) = 0;  // Pure virtual function
    virtual ~QuizParticipant() {}  // Virtual destructor for proper cleanup
};

class RegisteredParticipant : public QuizParticipant {  // Derived class for registered users
public:
    int attempt(Question* questions, int num) {         // Overrides attempt() function
        int score = 0;                                  // Initialize score
        cout << "\n[Registered Participant Attempting Quiz]\n";  // Notify user

        for (int i = 0; i < num; i++) {                 // Loop through each question
            Question* q = questions + i;                // Pointer to current question
            cout << "\nQ" << (i + 1) << ": " << q->prompt << "\n";  // Print question

            for (int j = 0; j < 4; j++) {               // Display answer choices
                cout << j << ") " << q->choices[j] << "\n";
            }

            int ans;                                    // Store user answer
            cout << "Your answer (0-3): ";
            cin >> ans;                                 // Read user input

            if (ans == q->correctIdx)                   // If correct, increase score
                score++;
        }

        cout << "Score: " << score << "/" << num << "\n";  // Show final score
        return score;                                   // Return score
    }
};

class GuestParticipant : public QuizParticipant {       // Derived class for guests
public:
    int attempt(Question* questions, int num) {         // Overrides attempt()
        cout << "\n[Guest Participant Attempting Quiz]\n";  // Notify user

        for (int i = 0; i < num; i++) {                 // Loop through each question
            Question* q = questions + i;                // Pointer to current question
            cout << "\nQ" << (i + 1) << ": " << q->prompt << "\n";  // Print question

            for (int j = 0; j < 4; j++) {               // Print choices
                cout << j << ") " << q->choices[j] << "\n";
            }

            int ans;                                    // Store user input
            cout << "Your answer (0-3): ";
            cin >> ans;                                 // Read user answer
        }

        cout << "(Results are available for registered users only)\n"; // No score
        return 0;                                       // Return 0 (score hidden)
    }
};

Question* addQuestion(Question* questions, int& size, Question newQ) {
    Question* newArr = new Question[size + 1];          // Create new array with +1 size
    for (int i = 0; i < size; i++) {
        newArr[i] = questions[i];                       // Copy old questions
    }
    newArr[size] = newQ;                                // Add new question at end
    delete[] questions;                                 // Free old array memory
    size++;                                             // Increase size count
    return newArr;                                      // Return updated array
}

Question* removeQuestion(Question* questions, int& size, int index) {
    if (index < 0 || index >= size) return questions;   // Check for invalid index

    Question* newArr = new Question[size - 1];          // Create smaller array
    int j = 0;                                           // New array index

    for (int i = 0; i < size; i++) {
        if (i != index)                                 // Skip the question to remove
            newArr[j++] = questions[i];                 // Copy others
    }

    delete[] questions;                                 // Delete old array
    size--;                                             // Decrease size
    return newArr;                                      // Return updated array
}

int main() {
    int numQuestions = 0;                               // Start with 0 questions
    Question* questions = nullptr;                      // Pointer to dynamic question list

    Question q1;                                        // Create first question
    strcpy(q1.prompt, "What is the capital of France?");
    strcpy(q1.choices[0], "Berlin");
    strcpy(q1.choices[1], "Madrid");
    strcpy(q1.choices[2], "Paris");
    strcpy(q1.choices[3], "Rome");
    q1.correctIdx = 2;                                  // Set correct answer index
    questions = addQuestion(questions, numQuestions, q1);  // Add to list

    Question q2;                                        // Create second question
    strcpy(q2.prompt, "Which planet is known as the Red Planet?");
    strcpy(q2.choices[0], "Earth");
    strcpy(q2.choices[1], "Mars");
    strcpy(q2.choices[2], "Jupiter");
    strcpy(q2.choices[3], "Saturn");
    q2.correctIdx = 1;                                  // Correct answer is Mars
    questions = addQuestion(questions, numQuestions, q2);  // Add to list

    QuizParticipant** participants = new QuizParticipant*[2];  // Create participant array
    participants[0] = new GuestParticipant();           // First is guest
    participants[1] = new RegisteredParticipant();      // Second is registered

    participants[0]->attempt(questions, numQuestions);  // Guest attempts quiz
    participants[1]->attempt(questions, numQuestions);  // Registered attempts quiz

    questions = removeQuestion(questions, numQuestions, 0);  // Remove first question

    cout << "\nAfter removing the first question, remaining questions:\n";
    for (int i = 0; i < numQuestions; i++) {
        cout << "Q" << i + 1 << ": " << questions[i].prompt << "\n";  // Show remaining questions
    }

    for (int i = 0; i < 2; i++) delete participants[i]; // Delete participant objects
    delete[] participants;                             // Delete participant array
    delete[] questions;                                // Delete questions array

    return 0;                                           // End of program
}
